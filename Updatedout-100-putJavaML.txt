



working on Threshold = 100 



working on changes to revision = 6

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 


 micro total changes =  7
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 7
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 3 
 number of two line micro-clone =  2
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 7


 micro total changes =  7
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 7
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 3 
 number of two line micro-clone =  2
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 8


 micro total changes =  7
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 7
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 3 
 number of two line micro-clone =  2
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 9


 micro total changes =  7
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 7
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 3 
 number of two line micro-clone =  2
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 10


 micro total changes =  7
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 7
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 3 
 number of two line micro-clone =  2
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 11


 micro total changes =  7
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 7
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 3 
 number of two line micro-clone =  2
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 12


 micro total changes =  7
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 7
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 3 
 number of two line micro-clone =  2
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 13

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {


 micro total changes =  12
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 12
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 7 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 14


 micro total changes =  12
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 12
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 7 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 15


 micro total changes =  12
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 12
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 7 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 16


 micro total changes =  12
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 12
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 7 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 17


 micro total changes =  12
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 12
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 7 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 18

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();


 micro total changes =  18
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 18
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 13 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 19


 micro total changes =  18
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 18
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 13 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 20


 micro total changes =  18
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 18
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 13 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 21


 micro total changes =  18
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 18
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 13 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 22


 micro total changes =  18
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 18
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 13 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 23


 micro total changes =  18
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 18
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 13 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 24


 micro total changes =  18
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 18
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 13 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 25


 micro total changes =  18
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 18
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 13 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 26

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 


 micro total changes =  26
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 26
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 21 
 number of two line micro-clone =  3
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 27

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 


 micro total changes =  34
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 34
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 25 
 number of two line micro-clone =  7
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 28


 micro total changes =  34
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 34
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 25 
 number of two line micro-clone =  7
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 29


 micro total changes =  34
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 34
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 25 
 number of two line micro-clone =  7
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 30


 micro total changes =  34
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 34
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 25 
 number of two line micro-clone =  7
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 31


 micro total changes =  34
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 34
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 25 
 number of two line micro-clone =  7
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 32


 micro total changes =  34
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 34
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 25 
 number of two line micro-clone =  7
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 33

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  37
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 37
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 28 
 number of two line micro-clone =  7
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 34


 micro total changes =  37
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 37
regular total changes = 0
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 0



 
 number of one line micro-clone = 28 
 number of two line micro-clone =  7
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 35

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  39
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 39
regular total changes = 2
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 2



 
 number of one line micro-clone = 29 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 36


 micro total changes =  39
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 39
regular total changes = 2
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 2



 
 number of one line micro-clone = 29 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 37


 micro total changes =  39
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 39
regular total changes = 2
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 2



 
 number of one line micro-clone = 29 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 38


 micro total changes =  39
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 39
regular total changes = 2
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 2



 
 number of one line micro-clone = 29 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 39


 micro total changes =  39
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 39
regular total changes = 2
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 2



 
 number of one line micro-clone = 29 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 40


 micro total changes =  39
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 39
regular total changes = 2
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 2



 
 number of one line micro-clone = 29 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 41


 micro total changes =  39
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 39
regular total changes = 2
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 2



 
 number of one line micro-clone = 29 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 42


 micro total changes =  39
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 39
regular total changes = 2
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 2



 
 number of one line micro-clone = 29 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 43


 micro total changes =  39
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 39
regular total changes = 2
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 2



 
 number of one line micro-clone = 29 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 44

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 45


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 46


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 47


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 48


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 49


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 50


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 51


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 52


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 53


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 54


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 55


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 56


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 57


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 58


 micro total changes =  40
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 40
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 30 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 59


 micro total changes =  41
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 41
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 31 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 60


 micro total changes =  41
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 41
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 31 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 61


 micro total changes =  41
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 41
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 31 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 62


 micro total changes =  41
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 41
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 31 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 63


 micro total changes =  41
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 41
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 31 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 64


 micro total changes =  41
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 41
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 31 
 number of two line micro-clone =  8
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 65

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  43
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 43
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 32 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 66


 micro total changes =  44
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 44
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 33 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 67


 micro total changes =  44
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 44
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 33 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 68


 micro total changes =  44
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 44
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 33 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 69


 micro total changes =  45
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 45
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 70


 micro total changes =  45
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 45
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 71


 micro total changes =  45
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 45
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 72


 micro total changes =  45
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 45
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 73


 micro total changes =  45
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 45
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 74


 micro total changes =  45
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 45
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 75


 micro total changes =  45
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 45
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 76


 micro total changes =  45
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 45
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 77


 micro total changes =  45
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 45
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 78


 micro total changes =  45
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 45
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 79


 micro total changes =  45
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 45
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 80


 micro total changes =  45
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 45
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  9
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 81


 micro total changes =  46
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 46
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 34 
 number of two line micro-clone =  10
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 82


 micro total changes =  47
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 47
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 35 
 number of two line micro-clone =  10
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 83


 micro total changes =  47
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 47
regular total changes = 4
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 4



 
 number of one line micro-clone = 35 
 number of two line micro-clone =  10
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 84


 micro total changes =  47
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 47
regular total changes = 5
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 5



 
 number of one line micro-clone = 35 
 number of two line micro-clone =  10
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 85

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  49
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 49
regular total changes = 5
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 5



 
 number of one line micro-clone = 36 
 number of two line micro-clone =  11
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 86


 micro total changes =  49
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 49
regular total changes = 5
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 5



 
 number of one line micro-clone = 36 
 number of two line micro-clone =  11
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 87


 micro total changes =  50
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 50
regular total changes = 5
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 5



 
 number of one line micro-clone = 37 
 number of two line micro-clone =  11
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 88

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  52
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 52
regular total changes = 5
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 5



 
 number of one line micro-clone = 38 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 89

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  54
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 54
regular total changes = 5
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 5



 
 number of one line micro-clone = 40 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 90


 micro total changes =  54
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 54
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 40 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 91


 micro total changes =  54
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 54
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 40 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 92


 micro total changes =  54
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 54
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 40 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 93


 micro total changes =  54
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 54
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 40 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 94


 micro total changes =  54
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 54
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 40 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 95


 micro total changes =  54
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 54
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 40 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 96


 micro total changes =  54
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 54
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 40 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 97


 micro total changes =  54
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 54
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 40 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 98


 micro total changes =  54
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 54
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 40 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 99


 micro total changes =  54
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 54
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 40 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 100


 micro total changes =  54
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 54
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 40 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 101


 micro total changes =  55
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 55
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 41 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 102


 micro total changes =  55
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 55
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 41 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 103


 micro total changes =  55
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 55
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 41 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 104


 micro total changes =  55
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 55
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 41 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 105


 micro total changes =  55
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 55
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 41 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 106


 micro total changes =  56
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 56
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 42 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 107


 micro total changes =  56
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 56
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 42 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 108


 micro total changes =  56
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 56
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 42 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 109

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  58
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 58
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 44 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 110


 micro total changes =  59
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 59
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 45 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 111


 micro total changes =  60
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 60
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 46 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 112


 micro total changes =  61
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 61
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 47 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 113


 micro total changes =  61
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 61
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 47 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 114


 micro total changes =  61
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 61
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 47 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 115


 micro total changes =  62
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 62
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 48 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 116


 micro total changes =  62
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 62
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 48 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 117


 micro total changes =  62
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 62
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 48 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 118


 micro total changes =  62
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 62
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 48 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 119


 micro total changes =  62
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 62
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 48 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 120


 micro total changes =  62
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 62
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 48 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 121


 micro total changes =  63
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 63
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 49 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 122


 micro total changes =  63
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 63
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 49 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 123


 micro total changes =  63
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 63
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 49 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 124


 micro total changes =  63
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 63
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 49 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 125


 micro total changes =  63
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 63
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 49 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 126


 micro total changes =  63
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 63
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 49 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 127


 micro total changes =  63
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 63
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 49 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 128


 micro total changes =  63
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 63
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 49 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 129


 micro total changes =  63
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 63
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 49 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 130


 micro total changes =  63
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 63
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 49 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 131


 micro total changes =  63
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 63
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 49 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 132

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  65
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 65
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 51 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 133


 micro total changes =  65
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 65
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 51 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 134


 micro total changes =  65
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 65
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 51 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 135


 micro total changes =  66
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 66
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 52 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 136


 micro total changes =  66
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 66
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 52 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 137


 micro total changes =  66
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 66
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 52 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 138


 micro total changes =  66
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 66
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 52 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 139


 micro total changes =  66
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 66
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 52 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 140


 micro total changes =  66
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 66
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 52 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 141


 micro total changes =  67
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 67
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 53 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 142


 micro total changes =  67
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 67
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 53 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 143


 micro total changes =  67
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 67
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 53 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 144

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  69
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 69
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 55 
 number of two line micro-clone =  12
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 145


 micro total changes =  70
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 70
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 55 
 number of two line micro-clone =  13
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 146

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();


 micro total changes =  76
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 76
regular total changes = 6
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 6



 
 number of one line micro-clone = 57 
 number of two line micro-clone =  17
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 147

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 148


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 149


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 150


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 151


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 152


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 153


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 154


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 155


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 156


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 157


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 158


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 159


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 160


 micro total changes =  85
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 85
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 64 
 number of two line micro-clone =  19
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 161

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  87
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 87
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 65 
 number of two line micro-clone =  20
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 162


 micro total changes =  87
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 87
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 65 
 number of two line micro-clone =  20
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 163

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {


 micro total changes =  92
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 92
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 69 
 number of two line micro-clone =  21
 number of three line micro-clone = 0
 number of four line micro-clone = 2



working on changes to revision = 164

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 


 micro total changes =  99
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 99
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 72 
 number of two line micro-clone =  24
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 165


 micro total changes =  99
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 99
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 72 
 number of two line micro-clone =  24
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 166


 micro total changes =  99
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 99
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 72 
 number of two line micro-clone =  24
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 167

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  101
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 101
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 74 
 number of two line micro-clone =  24
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 168

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  104
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 104
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 77 
 number of two line micro-clone =  24
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 169

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 170


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 171


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 172


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 173


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 174


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 175


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 176


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 177


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 178


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 179


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 180


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 181


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 13
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 13



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 182


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 14
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 14



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 183


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 14
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 14



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 184


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 14
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 14



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 185


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 14
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 14



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 186


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 15
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 15



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 187


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 15
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 15



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 188


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 15
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 15



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 189


 micro total changes =  113
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 113
regular total changes = 15
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 15



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 3



working on changes to revision = 190

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  115
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 115
regular total changes = 16
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 16



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 5



working on changes to revision = 191


 micro total changes =  115
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 115
regular total changes = 16
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 16



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 5



working on changes to revision = 192


 micro total changes =  115
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 115
regular total changes = 16
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 16



 
 number of one line micro-clone = 80 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 5



working on changes to revision = 193

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {


 micro total changes =  120
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 120
regular total changes = 16
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 16



 
 number of one line micro-clone = 85 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 5



working on changes to revision = 194


 micro total changes =  120
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 120
regular total changes = 16
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 16



 
 number of one line micro-clone = 85 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 5



working on changes to revision = 195


 micro total changes =  120
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 120
regular total changes = 16
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 16



 
 number of one line micro-clone = 85 
 number of two line micro-clone =  30
 number of three line micro-clone = 0
 number of four line micro-clone = 5



working on changes to revision = 196

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  121
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 121
regular total changes = 18
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 18



 
 number of one line micro-clone = 85 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 5



working on changes to revision = 197


 micro total changes =  121
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 121
regular total changes = 18
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 18



 
 number of one line micro-clone = 85 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 5



working on changes to revision = 198


 micro total changes =  122
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 122
regular total changes = 18
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 18



 
 number of one line micro-clone = 86 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 5



working on changes to revision = 199


 micro total changes =  122
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 122
regular total changes = 18
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 18



 
 number of one line micro-clone = 86 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 5



working on changes to revision = 200

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  125
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 125
regular total changes = 18
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 18



 
 number of one line micro-clone = 88 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 201


 micro total changes =  125
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 125
regular total changes = 18
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 18



 
 number of one line micro-clone = 88 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 202

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  128
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 128
regular total changes = 19
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 19



 
 number of one line micro-clone = 91 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 203


 micro total changes =  128
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 128
regular total changes = 19
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 19



 
 number of one line micro-clone = 91 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 204


 micro total changes =  128
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 128
regular total changes = 19
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 19



 
 number of one line micro-clone = 91 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 205

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  129
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 129
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 92 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 206


 micro total changes =  129
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 129
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 92 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 207

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  131
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 131
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 94 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 208


 micro total changes =  131
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 131
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 94 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 209


 micro total changes =  131
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 131
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 94 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 210


 micro total changes =  131
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 131
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 94 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 211


 micro total changes =  131
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 131
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 94 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 212


 micro total changes =  131
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 131
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 94 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 213


 micro total changes =  131
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 131
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 94 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 214


 micro total changes =  131
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 131
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 94 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 215

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  133
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 133
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 96 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 216


 micro total changes =  133
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 133
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 96 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 217


 micro total changes =  133
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 133
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 96 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 218


 micro total changes =  134
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 134
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 97 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 219


 micro total changes =  134
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 134
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 97 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 220


 micro total changes =  134
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 134
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 97 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 221


 micro total changes =  135
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 135
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 98 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 222


 micro total changes =  136
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 136
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 99 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 223


 micro total changes =  136
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 136
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 99 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 224


 micro total changes =  136
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 136
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 99 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 225

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  138
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 138
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 101 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 226


 micro total changes =  138
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 138
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 101 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 227


 micro total changes =  138
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 138
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 101 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 228


 micro total changes =  138
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 138
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 101 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 229


 micro total changes =  138
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 138
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 101 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 230


 micro total changes =  138
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 138
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 101 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 231


 micro total changes =  138
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 138
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 101 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 6



working on changes to revision = 232


 micro total changes =  139
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 139
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 101 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 233


 micro total changes =  139
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 139
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 101 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 234


 micro total changes =  139
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 139
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 101 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 235


 micro total changes =  140
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 140
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 102 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 236


 micro total changes =  140
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 140
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 102 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 237


 micro total changes =  140
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 140
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 102 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 238


 micro total changes =  140
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 140
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 102 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 239


 micro total changes =  141
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 141
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 103 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 240


 micro total changes =  141
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 141
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 103 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 241


 micro total changes =  141
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 141
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 103 
 number of two line micro-clone =  31
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 242


 micro total changes =  142
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 142
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 103 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 243


 micro total changes =  142
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 142
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 103 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 244


 micro total changes =  142
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 142
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 103 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 245


 micro total changes =  142
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 142
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 103 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 7



working on changes to revision = 246

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  144
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 144
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 103 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 247


 micro total changes =  144
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 144
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 103 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 248

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  146
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 146
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 105 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 249


 micro total changes =  146
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 146
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 105 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 250


 micro total changes =  146
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 146
regular total changes = 21
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 21



 
 number of one line micro-clone = 105 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 251

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  148
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 148
regular total changes = 23
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 23



 
 number of one line micro-clone = 107 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 252


 micro total changes =  148
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 148
regular total changes = 23
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 23



 
 number of one line micro-clone = 107 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 253

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  148
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 148
regular total changes = 25
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 25



 
 number of one line micro-clone = 107 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 254


 micro total changes =  148
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 148
regular total changes = 25
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 25



 
 number of one line micro-clone = 107 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 255


 micro total changes =  149
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 149
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 108 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 256


 micro total changes =  149
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 149
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 108 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 257


 micro total changes =  149
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 149
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 108 
 number of two line micro-clone =  32
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 258

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);


 micro total changes =  158
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 158
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 114 
 number of two line micro-clone =  35
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 259


 micro total changes =  158
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 158
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 114 
 number of two line micro-clone =  35
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 260


 micro total changes =  158
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 158
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 114 
 number of two line micro-clone =  35
 number of three line micro-clone = 0
 number of four line micro-clone = 9



working on changes to revision = 261

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  160
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 160
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 115 
 number of two line micro-clone =  35
 number of three line micro-clone = 0
 number of four line micro-clone = 10



working on changes to revision = 262

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  164
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 164
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 117 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 263


 micro total changes =  164
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 164
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 117 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 264

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  167
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 167
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 120 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 265


 micro total changes =  167
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 167
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 120 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 266


 micro total changes =  167
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 167
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 120 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 267

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  170
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 170
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 123 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 268


 micro total changes =  170
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 170
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 123 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 269


 micro total changes =  170
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 170
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 123 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 270


 micro total changes =  170
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 170
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 123 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 271

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  174
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 174
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 127 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 272


 micro total changes =  174
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 174
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 127 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 273


 micro total changes =  174
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 174
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 127 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 274


 micro total changes =  174
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 174
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 127 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 275


 micro total changes =  174
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 174
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 127 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 276


 micro total changes =  174
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 174
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 127 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 277


 micro total changes =  174
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 174
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 127 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 278


 micro total changes =  174
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 174
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 127 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 279


 micro total changes =  174
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 174
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 127 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 280


 micro total changes =  174
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 174
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 127 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 281


 micro total changes =  175
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 175
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 128 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 282

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  177
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 177
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 130 
 number of two line micro-clone =  35
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 283

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  181
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 181
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 133 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 284


 micro total changes =  181
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 181
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 133 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 285


 micro total changes =  181
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 181
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 133 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 286


 micro total changes =  181
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 181
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 133 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 287


 micro total changes =  181
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 181
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 133 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 288


 micro total changes =  181
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 181
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 133 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 289


 micro total changes =  181
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 181
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 133 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 290


 micro total changes =  181
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 181
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 133 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 291


 micro total changes =  181
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 181
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 133 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 292


 micro total changes =  182
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 182
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 134 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 293


 micro total changes =  182
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 182
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 134 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 294


 micro total changes =  182
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 182
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 134 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 295


 micro total changes =  182
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 182
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 134 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 296


 micro total changes =  183
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 183
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 135 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 297


 micro total changes =  183
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 183
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 135 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 298


 micro total changes =  183
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 183
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 135 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 299


 micro total changes =  183
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 183
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 135 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 300


 micro total changes =  184
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 184
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 136 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 301


 micro total changes =  184
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 184
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 136 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 302


 micro total changes =  184
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 184
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 136 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 303


 micro total changes =  184
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 184
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 136 
 number of two line micro-clone =  36
 number of three line micro-clone = 1
 number of four line micro-clone = 11



working on changes to revision = 304

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  188
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 188
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 137 
 number of two line micro-clone =  36
 number of three line micro-clone = 3
 number of four line micro-clone = 12



working on changes to revision = 305


 micro total changes =  188
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 188
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 137 
 number of two line micro-clone =  36
 number of three line micro-clone = 3
 number of four line micro-clone = 12



working on changes to revision = 306

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  192
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 192
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 140 
 number of two line micro-clone =  36
 number of three line micro-clone = 3
 number of four line micro-clone = 13



working on changes to revision = 307

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  195
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 195
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 143 
 number of two line micro-clone =  36
 number of three line micro-clone = 3
 number of four line micro-clone = 13



working on changes to revision = 308


 micro total changes =  196
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 196
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 144 
 number of two line micro-clone =  36
 number of three line micro-clone = 3
 number of four line micro-clone = 13



working on changes to revision = 309


 micro total changes =  196
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 196
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 144 
 number of two line micro-clone =  36
 number of three line micro-clone = 3
 number of four line micro-clone = 13



working on changes to revision = 310

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  198
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 198
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 145 
 number of two line micro-clone =  36
 number of three line micro-clone = 4
 number of four line micro-clone = 13



working on changes to revision = 311


 micro total changes =  198
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 198
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 145 
 number of two line micro-clone =  36
 number of three line micro-clone = 4
 number of four line micro-clone = 13



working on changes to revision = 312


 micro total changes =  199
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 199
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 146 
 number of two line micro-clone =  36
 number of three line micro-clone = 4
 number of four line micro-clone = 13



working on changes to revision = 313


 micro total changes =  199
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 199
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 146 
 number of two line micro-clone =  36
 number of three line micro-clone = 4
 number of four line micro-clone = 13



working on changes to revision = 314


 micro total changes =  199
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 199
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 146 
 number of two line micro-clone =  36
 number of three line micro-clone = 4
 number of four line micro-clone = 13



working on changes to revision = 315


 micro total changes =  199
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 199
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 146 
 number of two line micro-clone =  36
 number of three line micro-clone = 4
 number of four line micro-clone = 13



working on changes to revision = 316


 micro total changes =  199
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 199
regular total changes = 26
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 26



 
 number of one line micro-clone = 146 
 number of two line micro-clone =  36
 number of three line micro-clone = 4
 number of four line micro-clone = 13



working on changes to revision = 317


 micro total changes =  199
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 199
regular total changes = 27
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 27



 
 number of one line micro-clone = 146 
 number of two line micro-clone =  36
 number of three line micro-clone = 4
 number of four line micro-clone = 13



working on changes to revision = 318

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  201
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 201
regular total changes = 27
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 27



 
 number of one line micro-clone = 148 
 number of two line micro-clone =  36
 number of three line micro-clone = 4
 number of four line micro-clone = 13



working on changes to revision = 319

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  211
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 211
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 157 
 number of two line micro-clone =  36
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 320


 micro total changes =  211
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 211
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 157 
 number of two line micro-clone =  36
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 321


 micro total changes =  211
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 211
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 157 
 number of two line micro-clone =  36
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 322


 micro total changes =  212
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 212
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 157 
 number of two line micro-clone =  37
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 323


 micro total changes =  212
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 212
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 157 
 number of two line micro-clone =  37
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 324


 micro total changes =  212
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 212
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 157 
 number of two line micro-clone =  37
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 325


 micro total changes =  212
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 212
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 157 
 number of two line micro-clone =  37
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 326


 micro total changes =  212
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 212
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 157 
 number of two line micro-clone =  37
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 327


 micro total changes =  212
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 212
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 157 
 number of two line micro-clone =  37
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 328

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  214
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 214
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 158 
 number of two line micro-clone =  38
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 329


 micro total changes =  214
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 214
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 158 
 number of two line micro-clone =  38
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 330


 micro total changes =  214
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 214
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 158 
 number of two line micro-clone =  38
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 331


 micro total changes =  214
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 214
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 158 
 number of two line micro-clone =  38
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 332


 micro total changes =  214
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 214
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 158 
 number of two line micro-clone =  38
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 333


 micro total changes =  214
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 214
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 158 
 number of two line micro-clone =  38
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 334


 micro total changes =  214
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 214
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 158 
 number of two line micro-clone =  38
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 335

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 336


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 337


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 338


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 339


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 340


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 341


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 342


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 343


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 344


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 345


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 346


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 347


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 348


 micro total changes =  217
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 217
regular total changes = 29
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 29



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  39
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 349


 micro total changes =  218
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 218
regular total changes = 30
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 30



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  40
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 350


 micro total changes =  218
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 218
regular total changes = 30
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 30



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  40
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 351


 micro total changes =  218
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 218
regular total changes = 30
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 30



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  40
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 352


 micro total changes =  218
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 218
regular total changes = 30
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 30



 
 number of one line micro-clone = 160 
 number of two line micro-clone =  40
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 353

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  221
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 221
regular total changes = 30
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 30



 
 number of one line micro-clone = 162 
 number of two line micro-clone =  41
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 354


 micro total changes =  221
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 221
regular total changes = 30
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 30



 
 number of one line micro-clone = 162 
 number of two line micro-clone =  41
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 355


 micro total changes =  222
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 222
regular total changes = 30
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 30



 
 number of one line micro-clone = 163 
 number of two line micro-clone =  41
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 356


 micro total changes =  222
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 222
regular total changes = 30
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 30



 
 number of one line micro-clone = 163 
 number of two line micro-clone =  41
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 357


 micro total changes =  222
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 222
regular total changes = 30
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 30



 
 number of one line micro-clone = 163 
 number of two line micro-clone =  41
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 358


 micro total changes =  223
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 223
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 164 
 number of two line micro-clone =  41
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 359


 micro total changes =  223
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 223
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 164 
 number of two line micro-clone =  41
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 360


 micro total changes =  223
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 223
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 164 
 number of two line micro-clone =  41
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 361


 micro total changes =  223
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 223
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 164 
 number of two line micro-clone =  41
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 362


 micro total changes =  224
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 224
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 165 
 number of two line micro-clone =  41
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 363


 micro total changes =  224
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 224
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 165 
 number of two line micro-clone =  41
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 364

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 


 micro total changes =  231
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 231
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 169 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 365


 micro total changes =  231
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 231
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 169 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 366

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  233
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 233
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 171 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 367


 micro total changes =  233
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 233
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 171 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 368


 micro total changes =  233
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 233
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 171 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 369


 micro total changes =  233
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 233
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 171 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 370


 micro total changes =  233
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 233
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 171 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 371


 micro total changes =  233
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 233
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 171 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 372


 micro total changes =  233
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 233
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 171 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 373


 micro total changes =  233
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 233
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 171 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 374


 micro total changes =  233
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 233
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 171 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 375


 micro total changes =  233
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 233
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 171 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 376


 micro total changes =  233
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 233
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 171 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 377


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 378


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 379


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 380


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 381


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 382


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 383


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 384


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 385


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 386


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 387


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 388


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 389


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 390


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 391


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 392


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 393


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 394


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 395


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 396


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 397


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 398


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 399


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 400


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 401


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 402


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 403


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 404


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 405


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 406


 micro total changes =  234
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 234
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 172 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 407

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  236
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 236
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 174 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 408


 micro total changes =  236
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 236
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 174 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 409


 micro total changes =  237
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 237
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 175 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 410

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {


 micro total changes =  242
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 242
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 180 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 411


 micro total changes =  242
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 242
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 180 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 412


 micro total changes =  242
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 242
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 180 
 number of two line micro-clone =  44
 number of three line micro-clone = 5
 number of four line micro-clone = 13



working on changes to revision = 413

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  246
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 246
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 181 
 number of two line micro-clone =  46
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 414


 micro total changes =  247
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 247
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 182 
 number of two line micro-clone =  46
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 415


 micro total changes =  247
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 247
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 182 
 number of two line micro-clone =  46
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 416


 micro total changes =  248
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 248
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 183 
 number of two line micro-clone =  46
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 417

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 418


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 419


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 420


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 421


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 422


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 423


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 424


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 425


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 426


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 427


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 428


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 429


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 430


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 431


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 432


 micro total changes =  250
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 250
regular total changes = 31
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 31



 
 number of one line micro-clone = 184 
 number of two line micro-clone =  47
 number of three line micro-clone = 6
 number of four line micro-clone = 13



working on changes to revision = 433

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  256
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 256
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 187 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 13



working on changes to revision = 434


 micro total changes =  256
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 256
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 187 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 13



working on changes to revision = 435


 micro total changes =  256
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 256
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 187 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 13



working on changes to revision = 436


 micro total changes =  256
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 256
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 187 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 13



working on changes to revision = 437


 micro total changes =  256
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 256
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 187 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 13



working on changes to revision = 438


 micro total changes =  257
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 257
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 188 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 13



working on changes to revision = 439


 micro total changes =  257
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 257
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 188 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 13



working on changes to revision = 440


 micro total changes =  257
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 257
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 188 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 13



working on changes to revision = 441


 micro total changes =  257
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 257
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 188 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 13



working on changes to revision = 442


 micro total changes =  257
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 257
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 188 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 13



working on changes to revision = 443


 micro total changes =  257
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 257
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 188 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 13



working on changes to revision = 444


 micro total changes =  258
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 258
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 188 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 445


 micro total changes =  258
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 258
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 188 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 446


 micro total changes =  258
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 258
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 188 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 447


 micro total changes =  259
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 259
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 189 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 448


 micro total changes =  259
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 259
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 189 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 449


 micro total changes =  259
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 259
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 189 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 450


 micro total changes =  260
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 260
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 190 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 451

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  262
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 262
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 192 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 452


 micro total changes =  262
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 262
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 192 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 453


 micro total changes =  262
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 262
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 192 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 454


 micro total changes =  262
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 262
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 192 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 455


 micro total changes =  262
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 262
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 192 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 456


 micro total changes =  262
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 262
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 192 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 457


 micro total changes =  262
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 262
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 192 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 458


 micro total changes =  262
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 262
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 192 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 459


 micro total changes =  262
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 262
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 192 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 460


 micro total changes =  262
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 262
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 192 
 number of two line micro-clone =  48
 number of three line micro-clone = 8
 number of four line micro-clone = 14



working on changes to revision = 461

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {


 micro total changes =  267
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 267
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 195 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 462


 micro total changes =  267
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 267
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 195 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 463


 micro total changes =  267
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 267
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 195 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 464


 micro total changes =  267
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 267
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 195 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 465


 micro total changes =  267
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 267
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 195 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 466


 micro total changes =  267
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 267
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 195 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 467


 micro total changes =  267
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 267
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 195 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 468


 micro total changes =  267
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 267
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 195 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 469


 micro total changes =  268
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 268
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 196 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 470

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 471


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 472


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 473


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 474


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 475


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 476


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 477


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 478


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 479


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 480


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 481


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 482


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 483


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 484


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 485


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 486


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 487


 micro total changes =  271
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 271
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 199 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 488


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 489


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 490


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 491


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 492


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 493


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 494


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 495


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 496


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 497


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 498


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 499


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 500


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 501


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 502


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 503


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 504


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 505


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 506


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 507


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 508


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 509


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 510


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 511


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 512


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 513


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 514


 micro total changes =  272
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 272
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 200 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 515

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  276
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 276
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 204 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 516


 micro total changes =  276
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 276
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 204 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 517


 micro total changes =  276
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 276
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 204 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 518


 micro total changes =  276
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 276
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 204 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 519


 micro total changes =  276
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 276
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 204 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 520


 micro total changes =  276
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 276
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 204 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 521


 micro total changes =  276
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 276
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 204 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 522


 micro total changes =  276
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 276
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 204 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 523


 micro total changes =  276
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 276
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 204 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 524


 micro total changes =  276
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 276
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 204 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 525


 micro total changes =  276
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 276
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 204 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 526

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  278
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 278
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 206 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 527


 micro total changes =  278
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 278
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 206 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 528


 micro total changes =  278
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 278
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 206 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 529


 micro total changes =  278
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 278
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 206 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 530


 micro total changes =  278
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 278
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 206 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 531


 micro total changes =  278
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 278
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 206 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 532


 micro total changes =  278
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 278
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 206 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 533


 micro total changes =  278
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 278
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 206 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 534


 micro total changes =  278
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 278
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 206 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 535


 micro total changes =  278
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 278
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 206 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 536


 micro total changes =  278
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 278
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 206 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 537


 micro total changes =  279
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 279
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 207 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 538


 micro total changes =  279
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 279
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 207 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 539


 micro total changes =  279
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 279
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 207 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 540


 micro total changes =  279
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 279
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 207 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 541


 micro total changes =  279
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 279
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 207 
 number of two line micro-clone =  49
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 542

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {


 micro total changes =  284
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 284
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 210 
 number of two line micro-clone =  51
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 543


 micro total changes =  284
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 284
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 210 
 number of two line micro-clone =  51
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 544


 micro total changes =  284
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 284
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 210 
 number of two line micro-clone =  51
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 545


 micro total changes =  284
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 284
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 210 
 number of two line micro-clone =  51
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 546


 micro total changes =  284
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 284
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 210 
 number of two line micro-clone =  51
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 547


 micro total changes =  285
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 285
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 211 
 number of two line micro-clone =  51
 number of three line micro-clone = 9
 number of four line micro-clone = 14



working on changes to revision = 548

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  288
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 288
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 212 
 number of two line micro-clone =  52
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 549


 micro total changes =  289
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 289
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 212 
 number of two line micro-clone =  53
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 550


 micro total changes =  289
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 289
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 212 
 number of two line micro-clone =  53
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 551


 micro total changes =  289
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 289
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 212 
 number of two line micro-clone =  53
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 552

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  292
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 292
regular total changes = 35
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 35



 
 number of one line micro-clone = 215 
 number of two line micro-clone =  53
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 553

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);


 micro total changes =  302
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 302
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 224 
 number of two line micro-clone =  54
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 554


 micro total changes =  303
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 303
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 225 
 number of two line micro-clone =  54
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 555

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  307
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 307
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 228 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 556


 micro total changes =  308
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 308
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 229 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 557

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 558


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 559


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 560


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 561


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 562


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 563


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 564


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 565


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 566


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 567


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 568


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 569


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 570


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 571


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 572


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 573


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 574


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 575


 micro total changes =  310
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 310
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 231 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 576


 micro total changes =  311
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 311
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 232 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 577


 micro total changes =  311
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 311
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 232 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 578


 micro total changes =  311
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 311
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 232 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 579


 micro total changes =  311
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 311
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 232 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 580


 micro total changes =  311
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 311
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 232 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 581


 micro total changes =  311
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 311
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 232 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 582


 micro total changes =  311
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 311
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 232 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 583


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 584


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 585


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 586


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 587


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 588


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 589


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 590


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 591


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 592


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 593


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 594


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 595


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 596


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 597


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 598


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 599


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 600


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 601


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 602


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 603


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 604


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 605


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 606


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 607


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 608


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 609


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 610


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 611


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 612


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 36
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 36



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 613


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 614


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 615


 micro total changes =  312
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 312
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  55
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 616


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 617


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 618


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 619


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 620


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 621


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 622


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 623


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 624


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 625


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 626


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 627


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 628


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 629


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 630


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 631


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 632


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 633


 micro total changes =  313
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 313
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 233 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 634


 micro total changes =  314
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 314
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 234 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 635


 micro total changes =  314
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 314
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 234 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 636


 micro total changes =  315
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 315
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 235 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 637


 micro total changes =  315
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 315
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 235 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 638

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  318
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 318
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 238 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 639


 micro total changes =  318
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 318
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 238 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 640


 micro total changes =  318
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 318
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 238 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 641


 micro total changes =  318
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 318
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 238 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 642


 micro total changes =  318
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 318
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 238 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 643


 micro total changes =  318
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 318
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 238 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 644


 micro total changes =  318
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 318
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 238 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 645


 micro total changes =  318
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 318
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 238 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 646


 micro total changes =  318
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 318
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 238 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 647


 micro total changes =  318
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 318
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 238 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 648


 micro total changes =  318
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 318
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 238 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 649


 micro total changes =  318
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 318
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 238 
 number of two line micro-clone =  56
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 650

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 651


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 652


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 653


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 654


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 655


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 656


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 37
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 37



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 657


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 658


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 659


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 660


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 661


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 662


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 663


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 664


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 665


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 666


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 667


 micro total changes =  320
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 320
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  57
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 668

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  322
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 322
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  59
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 669


 micro total changes =  322
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 322
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  59
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 670


 micro total changes =  322
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 322
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  59
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 671


 micro total changes =  322
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 322
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  59
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 672


 micro total changes =  322
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 322
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  59
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 673


 micro total changes =  322
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 322
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 239 
 number of two line micro-clone =  59
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 674

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  326
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 326
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 243 
 number of two line micro-clone =  59
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 675


 micro total changes =  326
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 326
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 243 
 number of two line micro-clone =  59
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 676


 micro total changes =  326
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 326
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 243 
 number of two line micro-clone =  59
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 677


 micro total changes =  326
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 326
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 243 
 number of two line micro-clone =  59
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 678

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;


 micro total changes =  337
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 337
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 10
 number of four line micro-clone = 14



working on changes to revision = 679


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 680


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 681


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 682


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 683


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 684


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 685


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 686


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 687


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 688


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 689


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 690


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 691


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 692


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 693


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 694


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 695


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 696


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 697


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 698


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 699


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 700


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 701


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 702


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 703


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 704


 micro total changes =  338
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 338
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 254 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 705

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  340
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 340
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 256 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 706


 micro total changes =  340
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 340
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 256 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 707


 micro total changes =  341
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 341
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 708


 micro total changes =  341
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 341
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 709


 micro total changes =  341
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 341
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 710


 micro total changes =  341
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 341
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 711


 micro total changes =  341
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 341
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 712


 micro total changes =  341
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 341
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 713


 micro total changes =  341
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 341
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 714


 micro total changes =  341
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 341
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 715


 micro total changes =  341
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 341
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 716


 micro total changes =  341
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 341
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 717


 micro total changes =  341
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 341
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 718


 micro total changes =  341
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 341
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 11
 number of four line micro-clone = 14



working on changes to revision = 719


 micro total changes =  342
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 342
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 720


 micro total changes =  342
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 342
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 721


 micro total changes =  342
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 342
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 722


 micro total changes =  342
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 342
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 257 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 723


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 724


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 725


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 726


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 727


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 728


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 729


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 38
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 38



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 730


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 39
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 39



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 731


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 39
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 39



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 732


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 39
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 39



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 733


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 39
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 39



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 734


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 39
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 39



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 735


 micro total changes =  343
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 343
regular total changes = 39
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 39



 
 number of one line micro-clone = 258 
 number of two line micro-clone =  59
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 736

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  345
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 345
regular total changes = 41
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 41



 
 number of one line micro-clone = 259 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 737


 micro total changes =  345
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 345
regular total changes = 41
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 41



 
 number of one line micro-clone = 259 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 738


 micro total changes =  345
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 345
regular total changes = 41
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 41



 
 number of one line micro-clone = 259 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 739


 micro total changes =  345
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 345
regular total changes = 41
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 41



 
 number of one line micro-clone = 259 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 740


 micro total changes =  345
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 345
regular total changes = 41
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 41



 
 number of one line micro-clone = 259 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 741


 micro total changes =  345
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 345
regular total changes = 41
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 41



 
 number of one line micro-clone = 259 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 742


 micro total changes =  345
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 345
regular total changes = 41
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 41



 
 number of one line micro-clone = 259 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 743


 micro total changes =  346
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 346
regular total changes = 41
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 41



 
 number of one line micro-clone = 260 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 744

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 745


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 746


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 747


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 748


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 749


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 750


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 751


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 752


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 753


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 754


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 755


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 756


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 757


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 758


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 759


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 760


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 761


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 762


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 763


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 764


 micro total changes =  349
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 349
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 263 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 765


 micro total changes =  350
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 350
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 264 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 766


 micro total changes =  351
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 351
regular total changes = 42
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 42



 
 number of one line micro-clone = 265 
 number of two line micro-clone =  60
 number of three line micro-clone = 12
 number of four line micro-clone = 14



working on changes to revision = 767

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 }

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 


 micro total changes =  364
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 364
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 271 
 number of two line micro-clone =  66
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 768


 micro total changes =  364
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 364
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 271 
 number of two line micro-clone =  66
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 769


 micro total changes =  364
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 364
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 271 
 number of two line micro-clone =  66
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 770


 micro total changes =  364
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 364
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 271 
 number of two line micro-clone =  66
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 771


 micro total changes =  364
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 364
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 271 
 number of two line micro-clone =  66
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 772


 micro total changes =  364
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 364
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 271 
 number of two line micro-clone =  66
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 773


 micro total changes =  364
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 364
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 271 
 number of two line micro-clone =  66
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 774


 micro total changes =  364
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 364
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 271 
 number of two line micro-clone =  66
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 775


 micro total changes =  364
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 364
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 271 
 number of two line micro-clone =  66
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 776

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  367
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 367
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 273 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 777


 micro total changes =  368
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 368
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 274 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 778


 micro total changes =  368
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 368
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 274 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 779


 micro total changes =  368
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 368
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 274 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 780


 micro total changes =  368
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 368
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 274 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 781

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 782


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 783


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 784


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 785


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 786


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 787


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 788


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 789


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 790


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 791


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 792


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 793


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 794


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 795


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 796


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 797


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 798


 micro total changes =  370
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 370
regular total changes = 43
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 43



 
 number of one line micro-clone = 276 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 799

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  373
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 373
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 279 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 800


 micro total changes =  373
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 373
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 279 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 801


 micro total changes =  373
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 373
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 279 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 802


 micro total changes =  373
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 373
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 279 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 803


 micro total changes =  373
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 373
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 279 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 804


 micro total changes =  373
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 373
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 279 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 805


 micro total changes =  373
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 373
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 279 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 806


 micro total changes =  373
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 373
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 279 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 807


 micro total changes =  373
micro changes that can be synchronized automatically = 0
micro changes that cannot be synchronized automatically = 373
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 279 
 number of two line micro-clone =  67
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 808

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 }

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 

 Print String str2 :- 
 }

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 }

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 }

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 }

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 }

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 

 Print String str2 :- 
 }

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str1 :- 
 

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 

 Print String str2 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str1 :- 
 

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }


 micro total changes =  394
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 392
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 297 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 809


 micro total changes =  395
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 393
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 298 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 810


 micro total changes =  395
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 393
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 298 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 811

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {


 micro total changes =  400
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 398
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 303 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 812


 micro total changes =  400
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 398
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 303 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 813


 micro total changes =  400
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 398
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 303 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 814


 micro total changes =  400
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 398
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 303 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 815


 micro total changes =  401
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 399
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 304 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 816


 micro total changes =  401
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 399
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 304 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 817


 micro total changes =  401
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 399
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 304 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 818


 micro total changes =  401
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 399
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 304 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 819


 micro total changes =  401
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 399
regular total changes = 44
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 44



 
 number of one line micro-clone = 304 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 820

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  405
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 403
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 308 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 821

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }


 micro total changes =  417
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 415
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 320 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 822

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);


 micro total changes =  426
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 424
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 329 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 823


 micro total changes =  426
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 424
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 329 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 824


 micro total changes =  426
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 424
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 329 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 825


 micro total changes =  426
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 424
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 329 
 number of two line micro-clone =  70
 number of three line micro-clone = 13
 number of four line micro-clone = 14



working on changes to revision = 826

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 


 micro total changes =  434
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 432
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 335 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 827

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 


 micro total changes =  441
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 439
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 342 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 828


 micro total changes =  442
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 440
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 343 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 829

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  445
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 443
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 346 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 830


 micro total changes =  445
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 443
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 346 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 831


 micro total changes =  445
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 443
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 346 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 832


 micro total changes =  445
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 443
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 346 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 833


 micro total changes =  445
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 443
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 346 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 834


 micro total changes =  445
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 443
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 346 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 835


 micro total changes =  446
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 444
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 347 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 836


 micro total changes =  446
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 444
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 347 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 837


 micro total changes =  446
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 444
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 347 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 838


 micro total changes =  446
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 444
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 347 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 839


 micro total changes =  446
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 444
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 347 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 840


 micro total changes =  447
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 445
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 348 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 841


 micro total changes =  447
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 445
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 348 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 842


 micro total changes =  447
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 445
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 348 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 843

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  449
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 447
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 350 
 number of two line micro-clone =  71
 number of three line micro-clone = 14
 number of four line micro-clone = 14



working on changes to revision = 844

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  451
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 449
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 350 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 845


 micro total changes =  452
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 450
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 351 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 846


 micro total changes =  453
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 451
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 352 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 847

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  455
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 453
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 354 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 848


 micro total changes =  455
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 453
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 354 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 849


 micro total changes =  455
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 453
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 354 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 850


 micro total changes =  455
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 453
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 354 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 851


 micro total changes =  455
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 453
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 354 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 852


 micro total changes =  456
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 454
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 355 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 853


 micro total changes =  456
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 454
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 355 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 854


 micro total changes =  456
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 454
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 355 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 855


 micro total changes =  456
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 454
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 355 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 856


 micro total changes =  456
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 454
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 355 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 857


 micro total changes =  456
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 454
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 355 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 858


 micro total changes =  456
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 454
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 355 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 859


 micro total changes =  456
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 454
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 355 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 860


 micro total changes =  457
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 455
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 356 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 861


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 862


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 863


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 864


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 865


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 866


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 867


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 868


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 869


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 870


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 871


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 872


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 873


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 874


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 875


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 876


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 877


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 878


 micro total changes =  458
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 456
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 15
 number of four line micro-clone = 14



working on changes to revision = 879


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 880


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 881


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 882


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 883


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 884


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 885


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 886


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 887


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 888


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 889


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 890


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 891


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 892


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 893


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 894


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 895


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 896


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 897


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 898


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 899


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 900


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 901


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 902


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 903


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 904


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 905


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 906


 micro total changes =  459
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 457
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 357 
 number of two line micro-clone =  72
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 907

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;


 micro total changes =  470
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 468
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 367 
 number of two line micro-clone =  73
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 908


 micro total changes =  470
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 468
regular total changes = 45
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 45



 
 number of one line micro-clone = 367 
 number of two line micro-clone =  73
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 909

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  477
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 475
regular total changes = 48
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 48



 
 number of one line micro-clone = 368 
 number of two line micro-clone =  79
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 910


 micro total changes =  477
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 475
regular total changes = 48
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 48



 
 number of one line micro-clone = 368 
 number of two line micro-clone =  79
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 911


 micro total changes =  477
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 475
regular total changes = 48
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 48



 
 number of one line micro-clone = 368 
 number of two line micro-clone =  79
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 912


 micro total changes =  477
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 475
regular total changes = 48
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 48



 
 number of one line micro-clone = 368 
 number of two line micro-clone =  79
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 913

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  481
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 479
regular total changes = 48
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 48



 
 number of one line micro-clone = 372 
 number of two line micro-clone =  79
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 914

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  483
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 481
regular total changes = 48
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 48



 
 number of one line micro-clone = 374 
 number of two line micro-clone =  79
 number of three line micro-clone = 16
 number of four line micro-clone = 14



working on changes to revision = 915

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 }

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  497
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 495
regular total changes = 50
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 50



 
 number of one line micro-clone = 387 
 number of two line micro-clone =  79
 number of three line micro-clone = 17
 number of four line micro-clone = 14



working on changes to revision = 916


 micro total changes =  497
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 495
regular total changes = 50
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 50



 
 number of one line micro-clone = 387 
 number of two line micro-clone =  79
 number of three line micro-clone = 17
 number of four line micro-clone = 14



working on changes to revision = 917


 micro total changes =  498
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 496
regular total changes = 50
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 50



 
 number of one line micro-clone = 388 
 number of two line micro-clone =  79
 number of three line micro-clone = 17
 number of four line micro-clone = 14



working on changes to revision = 918

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  502
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 500
regular total changes = 50
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 50



 
 number of one line micro-clone = 390 
 number of two line micro-clone =  81
 number of three line micro-clone = 17
 number of four line micro-clone = 14



working on changes to revision = 919


 micro total changes =  502
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 500
regular total changes = 50
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 50



 
 number of one line micro-clone = 390 
 number of two line micro-clone =  81
 number of three line micro-clone = 17
 number of four line micro-clone = 14



working on changes to revision = 920


 micro total changes =  502
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 500
regular total changes = 50
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 50



 
 number of one line micro-clone = 390 
 number of two line micro-clone =  81
 number of three line micro-clone = 17
 number of four line micro-clone = 14



working on changes to revision = 921


 micro total changes =  502
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 500
regular total changes = 50
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 50



 
 number of one line micro-clone = 390 
 number of two line micro-clone =  81
 number of three line micro-clone = 17
 number of four line micro-clone = 14



working on changes to revision = 922


 micro total changes =  502
micro changes that can be synchronized automatically = 2
micro changes that cannot be synchronized automatically = 500
regular total changes = 50
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 50



 
 number of one line micro-clone = 390 
 number of two line micro-clone =  81
 number of three line micro-clone = 17
 number of four line micro-clone = 14



working on changes to revision = 923

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 }

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 

 Print String str2 :- 
 }

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 }

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 }

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str1 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 }

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 }

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str1 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 

 Print String str2 :- 
 }

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str1 :- 
 

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 

 Print String str2 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str1 :- 
 

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str1 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str2 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 }

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 }

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str1 :- 
 public interface Clusterer {

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str2 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 }

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 }

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str1 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str2 :- 
 public interface Clusterer {

 Print String str1 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str2 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 }

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 }

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 public interface Clusterer {

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str1 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str2 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str1 :- 
 private Vector<Instance> instances = new Vector<Instance>();

 Print String str2 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 }

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 }

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public Vector<Value> getValues(); 	public Value getValue(int index); 	public void setValue(int index,Value a); 	 	public Value getClassValue(); 	public  void  setClassValue(Value a); 	 	public void setClassMissing(); 	public boolean isClassMissing(); 	 	public boolean isCompatible(Instance i); 	 	public double getWeight(); 	public void setWeight(double d);

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 public Vector<Number> getVectorForm();      public Number[] getArrayForm();      public Number getValue(int index);      public void setValue(int index, Number a);      /**      * This method return the class value of this instance. If the method      * <code>isClassMissing</code> returns true, the output of this method is      * not defined.      *       * @return the class value of this instance      */     public Number getClassValue();      /**      * Set the class value of this instance. This will also set the status of the class of this instance (set,      * unset) to <code>set</code>.      *       * @param a the actual value for the classvalue      */     public void setClassValue(Number a);      /**      * Set whether the class value of this instance is known or not.       *       * @param b      *            When b is true than the class value is known, if b is false,      *            the class value is unknown.      */     public void setClassSet(boolean b);      public boolean isClassSet();      public boolean isCompatible(Instance i);      public double getWeight();      public void setWeight(double d);     /**      * This method return the number of values (attributes) this instance has.      * @return the number of values      */     public int size();

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 package net.sf.javaml.common;

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 package net.sf.javaml.core;

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 private Vector<Instance>values=new Vector<Instance>();

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 private Vector<Instance>instances=new Vector<Instance>();      public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 import java.util.Map;  import net.sf.javaml.core.Dataset; import net.sf.javaml.core.Instance;

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 public interface Clusterer {

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 /**      * Create a clusterer with the give dataset.      *       * @param data      *            the dataset to be used to create the clusterer      */     public void buildClusterer(Dataset data);      /**      * Predict to which cluster the instance belongs.      *       * @param instance      *            the instance to be clustered      * @return the predicted class value (cluster) of the instance      */     public Number predictCluster(Instance instance);      /**      * Predict the memberschip distribution of the instance for all the clusters      * in the clusterer.      *       * @param instance      * @return a map with the class value (cluster) as key and a double denoting      *         the membership as value for each key.      */     public Map<Number, Double> predictMembershipDistribution(Instance instance);      /**      * Gives the number of clusters in the clusterer.      *       * @return      */     public int getNumberOfClusters();

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 /**      * Add an instance to this dataset.      *       * @param i      *            the instance to be added      */     public void addInstance(Instance i);      /**      * Check whether all instances in this dataset are compatible with each      * other. This method will return true is all instances are compatible with      * each other, otherwise it will return false.      *       * @return true if all instances are compatible, false if not all instances      *         are compatible.      */     public boolean checkCompatibility();      /**      * Return the index associated with an Instance.      * @param i the instance where you want to know the index for.      * @return      */     public int getIndex(Instance i);     /**      * Get the instance with a certain index.      * @param index the index of the instance you want to retrieve.      * @return      */     public Instance getInstance(int index);     /**      * Remove the instance that is given as parameter from the dataset.      * @param i the instance to be removed from the dataset.      */     public void removeInstance(Instance i);     /**      * Return the instance with the given index.      * @param index the index of the instance to be deleted      */     public void removeInstance(int index);     /**      * Remove all instances from the dataset.      *      */     public void clear();     /**      * Returns the size of the dataset      * @return the number of instances in the dataset.      */     public int size();

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 /** 	 * Add an instance to this dataset. The compatibility of the new item with 	 * the items in the dataset should be checked by the implementation. 	 * Incompatible items should not be added to the dataset. 	 *  	 * @param i 	 *            the instance to be added 	 * @return true if the instance was added, otherwise false 	 */ 	public boolean addInstance(Instance i);  	/** 	 * Return the index associated with an Instance. 	 *  	 * @param i 	 *            the instance where you want to know the index for. 	 * @return 	 */ 	public int getIndex(Instance i);  	/** 	 * Get the instance with a certain index. 	 *  	 * @param index 	 *            the index of the instance you want to retrieve. 	 * @return 	 */ 	public Instance getInstance(int index);  	/** 	 * Remove the instance that is given as parameter from the dataset. 	 *  	 * @param i 	 *            the instance to be removed from the dataset. 	 */ 	public void removeInstance(Instance i);  	/** 	 * Return the instance with the given index. 	 *  	 * @param index 	 *            the index of the instance to be deleted 	 */ 	public void removeInstance(int index);  	/** 	 * Remove all instances from the dataset. 	 *  	 */ 	public void clear();  	/** 	 * Returns the size of the dataset 	 *  	 * @return the number of instances in the dataset. 	 */ 	public int size();

 Print String str1 :- 
 public void addInstance(Instance i) {         instances.add(i);              }      public boolean checkCompatibility() {         // TODO Auto-generated method stub         return false;     }      public int getIndex(Instance i) {        return instances.indexOf(i);     }      public Instance getInstance(int index) {         return instances.get(index);     }      public void removeInstance(Instance i) {        instances.remove(i);              }      public void removeInstance(int index) {        instances.remove(index);              }      public void clear() {        instances.removeAllElements();              }      public int size() {         return instances.size();     }

 Print String str2 :- 
 private Vector<Instance>instances=new Vector<Instance>();

 Print String str1 :- 
 public boolean addInstance(Instance i) { 		if (instances.size() >0 && !i.isCompatible(instances.get(0))) 			return false; 		else{ 			instances.add(i); 			return true; 		}  	}  	public int getIndex(Instance i) { 		return instances.indexOf(i); 	}  	public Instance getInstance(int index) { 		return instances.get(index); 	}  	public void removeInstance(Instance i) { 		instances.remove(i);  	}  	public void removeInstance(int index) { 		instances.remove(index);  	}  	public void clear() { 		instances.removeAllElements();  	}  	public int size() { 		return instances.size(); 	}

 Print String str2 :- 
 private Vector<Instance> instances = new Vector<Instance>();


 micro total changes =  527
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 523
regular total changes = 51
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 51



 
 number of one line micro-clone = 410 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 924

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {


 micro total changes =  532
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 528
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 415 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 925


 micro total changes =  533
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 529
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 416 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 926


 micro total changes =  533
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 529
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 416 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 927


 micro total changes =  533
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 529
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 416 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 928


 micro total changes =  533
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 529
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 416 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 929


 micro total changes =  533
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 529
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 416 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 930

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  535
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 531
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 418 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 931


 micro total changes =  535
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 531
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 418 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 932


 micro total changes =  535
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 531
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 418 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 933


 micro total changes =  535
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 531
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 418 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 934


 micro total changes =  535
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 531
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 418 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 935


 micro total changes =  536
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 532
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 419 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 936


 micro total changes =  536
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 532
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 419 
 number of two line micro-clone =  85
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 937

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);


 micro total changes =  546
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 542
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 425 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 938


 micro total changes =  546
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 542
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 425 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 939

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  549
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 545
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 428 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 940


 micro total changes =  549
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 545
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 428 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 941


 micro total changes =  549
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 545
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 428 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 942


 micro total changes =  549
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 545
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 428 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 943


 micro total changes =  549
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 545
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 428 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 944


 micro total changes =  549
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 545
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 428 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 945


 micro total changes =  549
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 545
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 428 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 946


 micro total changes =  550
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 546
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 429 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 947


 micro total changes =  550
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 546
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 429 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 948


 micro total changes =  550
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 546
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 429 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 949


 micro total changes =  550
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 546
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 429 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 950


 micro total changes =  550
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 546
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 429 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 951

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  552
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 548
regular total changes = 52
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 52



 
 number of one line micro-clone = 431 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 952

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  557
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 553
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 953


 micro total changes =  557
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 553
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 954


 micro total changes =  557
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 553
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 955


 micro total changes =  557
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 553
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 956


 micro total changes =  557
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 553
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 957


 micro total changes =  557
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 553
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 958


 micro total changes =  557
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 553
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  89
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 959


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 960


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 961


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 962


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 963


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 964


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 965


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 966


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 967


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 968


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 969


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 970


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 971


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 972


 micro total changes =  558
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 554
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 436 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 973


 micro total changes =  559
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 555
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 437 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 974


 micro total changes =  559
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 555
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 437 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 975


 micro total changes =  559
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 555
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 437 
 number of two line micro-clone =  90
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 976


 micro total changes =  560
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 556
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 437 
 number of two line micro-clone =  91
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 977


 micro total changes =  560
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 556
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 437 
 number of two line micro-clone =  91
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 978


 micro total changes =  561
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 557
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 438 
 number of two line micro-clone =  91
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 979


 micro total changes =  561
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 557
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 438 
 number of two line micro-clone =  91
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 980


 micro total changes =  561
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 557
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 438 
 number of two line micro-clone =  91
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 981


 micro total changes =  561
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 557
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 438 
 number of two line micro-clone =  91
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 982


 micro total changes =  561
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 557
regular total changes = 54
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 54



 
 number of one line micro-clone = 438 
 number of two line micro-clone =  91
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 983

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  564
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 560
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 441 
 number of two line micro-clone =  91
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 984


 micro total changes =  564
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 560
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 441 
 number of two line micro-clone =  91
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 985


 micro total changes =  565
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 561
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  91
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 986


 micro total changes =  565
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 561
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  91
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 987


 micro total changes =  565
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 561
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  91
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 988

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 989


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 990


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 991


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 992


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 993


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 994


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 995


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 996


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 997


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 998


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 999


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1000


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1001


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1002


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1003


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1004


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1005


 micro total changes =  571
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 567
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 442 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1006

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  573
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 569
regular total changes = 55
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 55



 
 number of one line micro-clone = 444 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1007

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  575
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 571
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 446 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1008


 micro total changes =  575
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 571
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 446 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1009


 micro total changes =  575
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 571
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 446 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1010


 micro total changes =  575
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 571
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 446 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1011


 micro total changes =  575
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 571
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 446 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1012


 micro total changes =  575
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 571
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 446 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1013


 micro total changes =  575
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 571
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 446 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1014


 micro total changes =  575
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 571
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 446 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1015


 micro total changes =  575
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 571
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 446 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1016


 micro total changes =  575
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 571
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 446 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1017


 micro total changes =  575
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 571
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 446 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1018


 micro total changes =  575
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 571
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 446 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1019


 micro total changes =  576
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 572
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 447 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1020


 micro total changes =  576
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 572
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 447 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1021


 micro total changes =  576
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 572
regular total changes = 56
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 56



 
 number of one line micro-clone = 447 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1022

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  576
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 572
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 447 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1023


 micro total changes =  576
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 572
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 447 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1024


 micro total changes =  576
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 572
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 447 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1025


 micro total changes =  576
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 572
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 447 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1026


 micro total changes =  576
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 572
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 447 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1027

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  579
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 575
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 450 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1028

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  581
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 577
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 452 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1029


 micro total changes =  581
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 577
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 452 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1030


 micro total changes =  581
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 577
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 452 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1031


 micro total changes =  581
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 577
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 452 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1032


 micro total changes =  581
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 577
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 452 
 number of two line micro-clone =  97
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1033


 micro total changes =  582
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 578
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 452 
 number of two line micro-clone =  98
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1034


 micro total changes =  582
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 578
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 452 
 number of two line micro-clone =  98
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1035


 micro total changes =  582
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 578
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 452 
 number of two line micro-clone =  98
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1036


 micro total changes =  583
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 579
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 453 
 number of two line micro-clone =  98
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1037


 micro total changes =  583
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 579
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 453 
 number of two line micro-clone =  98
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1038


 micro total changes =  583
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 579
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 453 
 number of two line micro-clone =  98
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1039


 micro total changes =  584
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 580
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 453 
 number of two line micro-clone =  99
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1040


 micro total changes =  584
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 580
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 453 
 number of two line micro-clone =  99
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1041


 micro total changes =  584
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 580
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 453 
 number of two line micro-clone =  99
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1042


 micro total changes =  585
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 581
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 453 
 number of two line micro-clone =  100
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1043


 micro total changes =  585
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 581
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 453 
 number of two line micro-clone =  100
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1044


 micro total changes =  585
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 581
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 453 
 number of two line micro-clone =  100
 number of three line micro-clone = 18
 number of four line micro-clone = 14



working on changes to revision = 1045


 micro total changes =  586
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 582
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 453 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1046

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  589
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 585
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 456 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1047


 micro total changes =  589
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 585
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 456 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1048


 micro total changes =  589
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 585
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 456 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1049


 micro total changes =  589
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 585
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 456 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1050


 micro total changes =  589
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 585
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 456 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1051


 micro total changes =  589
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 585
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 456 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1052

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1053


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1054


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1055


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1056


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1057


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1058


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1059


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1060


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1061


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1062


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1063


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1064


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1065


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1066


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1067


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1068


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1069


 micro total changes =  594
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 590
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 461 
 number of two line micro-clone =  100
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1070

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  597
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 593
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 463 
 number of two line micro-clone =  101
 number of three line micro-clone = 19
 number of four line micro-clone = 14



working on changes to revision = 1071


 micro total changes =  598
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 594
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 463 
 number of two line micro-clone =  101
 number of three line micro-clone = 20
 number of four line micro-clone = 14



working on changes to revision = 1072


 micro total changes =  598
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 594
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 463 
 number of two line micro-clone =  101
 number of three line micro-clone = 20
 number of four line micro-clone = 14



working on changes to revision = 1073

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }


 micro total changes =  602
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 598
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 20
 number of four line micro-clone = 14



working on changes to revision = 1074


 micro total changes =  602
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 598
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 20
 number of four line micro-clone = 14



working on changes to revision = 1075


 micro total changes =  602
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 598
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 20
 number of four line micro-clone = 14



working on changes to revision = 1076


 micro total changes =  602
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 598
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 20
 number of four line micro-clone = 14



working on changes to revision = 1077


 micro total changes =  602
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 598
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 20
 number of four line micro-clone = 14



working on changes to revision = 1078


 micro total changes =  603
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 599
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1079


 micro total changes =  603
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 599
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1080


 micro total changes =  603
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 599
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1081


 micro total changes =  603
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 599
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1082


 micro total changes =  603
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 599
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1083


 micro total changes =  603
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 599
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1084


 micro total changes =  603
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 599
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1085


 micro total changes =  603
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 599
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1086


 micro total changes =  603
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 599
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1087


 micro total changes =  603
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 599
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1088


 micro total changes =  603
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 599
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1089


 micro total changes =  603
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 599
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 467 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1090


 micro total changes =  604
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 600
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 468 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1091


 micro total changes =  604
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 600
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 468 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1092


 micro total changes =  604
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 600
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 468 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1093


 micro total changes =  604
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 600
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 468 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1094


 micro total changes =  605
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 601
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 469 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1095


 micro total changes =  605
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 601
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 469 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1096


 micro total changes =  605
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 601
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 469 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1097


 micro total changes =  605
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 601
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 469 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1098


 micro total changes =  605
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 601
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 469 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1099


 micro total changes =  605
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 601
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 469 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1100


 micro total changes =  605
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 601
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 469 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1101


 micro total changes =  605
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 601
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 469 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1102


 micro total changes =  605
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 601
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 469 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1103


 micro total changes =  605
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 601
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 469 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1104


 micro total changes =  605
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 601
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 469 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1105


 micro total changes =  605
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 601
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 469 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1106

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  608
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 604
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 472 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1107


 micro total changes =  608
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 604
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 472 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1108


 micro total changes =  608
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 604
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 472 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1109


 micro total changes =  608
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 604
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 472 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1110


 micro total changes =  609
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 605
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 473 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1111


 micro total changes =  609
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 605
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 473 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1112


 micro total changes =  609
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 605
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 473 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1113


 micro total changes =  609
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 605
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 473 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1114


 micro total changes =  609
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 605
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 473 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1115


 micro total changes =  609
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 605
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 473 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1116


 micro total changes =  609
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 605
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 473 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1117


 micro total changes =  609
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 605
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 473 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1118


 micro total changes =  609
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 605
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 473 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1119


 micro total changes =  609
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 605
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 473 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1120


 micro total changes =  609
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 605
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 473 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1121


 micro total changes =  609
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 605
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 473 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1122

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 private Vector<T> values = new Vector<T>();

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 return values.get(index);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 }

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 }

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 }

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 }

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 }

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 }

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 }

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 }

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 

 Print String str1 :- 
 

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str2 :- 
 }

 Print String str1 :- 
 

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public  void  setClassValue(Value a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public class VectorInstance<T> extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public class VectorInstance extends AbstractInstance {

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 private Vector<T> values = new Vector<T>();

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 private Vector<Value> values = new Vector<Value>();

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public Value getClassValue() { 		// TODO Auto-generated method stub 		return null; 	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 // TODO Auto-generated method stub 		return null; 	}  	public Vector<Value> getValues() { 		// TODO Auto-generated method stub 		return null; 	}  	public boolean isClassMissing() { 		// TODO Auto-generated method stub 		return false;

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 return values.get(index);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassMissing() { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValue(int index, Value a) {       values.set(index,a);

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 }      	public Vector<Value> getValues() { 		return values;

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 public void setValues(Vector<Value> vec){         values=vec;     }

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setClassValue(Value a) { 		// TODO Auto-generated method stub

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 }

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 

 Print String str1 :- 
 package net.sf.javaml.common;

 Print String str2 :- 
 public void setValue(int index, Value a) { 		// TODO Auto-generated method stub  	}

 Print String str1 :- 
 package net.sf.javaml.core;

 Print String str2 :- 
 


 micro total changes =  624
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 620
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 488 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1123


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1124


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1125


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1126


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1127


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1128


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1129


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1130


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1131


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1132


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1133


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1134


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1135


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1136


 micro total changes =  625
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 621
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 489 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1137


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1138


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1139


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1140


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1141


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1142


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1143


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1144


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1145


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1146


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1147


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1148


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1149


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1150


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1151


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1152


 micro total changes =  626
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 622
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 490 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1153


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1154


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1155


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1156


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1157


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1158


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1159


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1160


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1161


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1162


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1163


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1164


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1165


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1166


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1167


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1168


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1169


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1170


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1171


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1172


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1173


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1174


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1175


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1176


 micro total changes =  627
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 623
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  101
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1177


 micro total changes =  628
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 624
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1178


 micro total changes =  628
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 624
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1179


 micro total changes =  628
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 624
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1180


 micro total changes =  628
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 624
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1181


 micro total changes =  628
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 624
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1182


 micro total changes =  628
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 624
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1183


 micro total changes =  628
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 624
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1184


 micro total changes =  628
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 624
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1185


 micro total changes =  628
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 624
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1186


 micro total changes =  628
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 624
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1187


 micro total changes =  628
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 624
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1188


 micro total changes =  628
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 624
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 491 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1189


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1190


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1191


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1192


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1193


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1194


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1195


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1196


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1197


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1198


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1199


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1200


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1201


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1202


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1203


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1204


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1205


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1206


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1207


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1208


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1209


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1210


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1211


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1212


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1213


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1214


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1215


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1216


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1217


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1218


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1219


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1220


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1221


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1222


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1223


 micro total changes =  629
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 625
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 21
 number of four line micro-clone = 14



working on changes to revision = 1224


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1225


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1226


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1227


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1228


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1229


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1230


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1231


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1232


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1233


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1234


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1235


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 58
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 58



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1236


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1237


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1238


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1239


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1240


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1241


 micro total changes =  630
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 626
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 492 
 number of two line micro-clone =  102
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1242

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 

 Print String str1 :- 
 /* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getClassValue() 	 */ 	public Value getClassValue() { 		return classValue; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#getWeight() 	 */ 	public double getWeight() { 		return weight; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#isClassValueMissing() 	 */ 	public boolean isClassMissing() { 		return classValue==null; 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute) 	 */ 	public void setClass(Value a) { 		this.classValue=a; 		 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setClassValueMissing() 	 */ 	public void setClassMissing() { 		setClassValue(null); 	} 	/* (non-Javadoc) 	 * @see net.sf.javaml.common.Instance#setWeight(double) 	 */ 	public void setWeight(double d) { 		this.weight=d; 		 	}

 Print String str2 :- 
 public void setClassValue(Value a);

 Print String str1 :- 
 /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getClassValue()      */     public Value getClassValue() {         return classValue;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#getWeight()      */     public double getWeight() {         return weight;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#isClassValueMissing()      */     public boolean isClassMissing() {         return classValue==null;     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValue(net.sf.javaml.common.Attribute)      */     public void setClassValue(Value a) {         this.classValue=a;              }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setClassValueMissing()      */     public void setClassMissing() {         setClassValue(null);     }     /* (non-Javadoc)      * @see net.sf.javaml.common.Instance#setWeight(double)      */     public void setWeight(double d) {         this.weight=d;              }

 Print String str2 :- 
 public  void  setClassValue(Value a);


 micro total changes =  633
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 629
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 494 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1243


 micro total changes =  633
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 629
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 494 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1244


 micro total changes =  633
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 629
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 494 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1245


 micro total changes =  633
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 629
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 494 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1246


 micro total changes =  633
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 629
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 494 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1247


 micro total changes =  634
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 630
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 495 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1248


 micro total changes =  635
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 631
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 496 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1249


 micro total changes =  635
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 631
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 496 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1250


 micro total changes =  635
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 631
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 496 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1251


 micro total changes =  635
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 631
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 496 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1252

 Print String str1 :- 
 public void setClassValue(Value a);

 Print String str2 :- 
 import java.util.Vector;

 Print String str1 :- 
 public  void  setClassValue(Value a);

 Print String str2 :- 
 


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1253


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1254


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1255


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1256


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1257


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1258


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1259


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1260


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1261


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1262


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1263


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1264


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1265


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1266


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1267


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1268


 micro total changes =  637
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 633
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 498 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1269


 micro total changes =  638
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 634
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 499 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1270


 micro total changes =  638
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 634
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 499 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1271


 micro total changes =  638
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 634
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 499 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1272


 micro total changes =  638
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 634
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 499 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1273


 micro total changes =  639
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 635
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 500 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1274


 micro total changes =  639
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 635
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 500 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1275


 micro total changes =  639
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 635
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 500 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1276


 micro total changes =  639
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 635
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 500 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1277


 micro total changes =  639
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 635
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 500 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1278


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1279


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1280


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1281


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1282


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1283


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1284


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1285


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1286


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1287


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1288


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1289


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1290


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1291


 micro total changes =  640
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 636
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 501 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14



working on changes to revision = 1292


 micro total changes =  641
micro changes that can be synchronized automatically = 4
micro changes that cannot be synchronized automatically = 637
regular total changes = 59
regular changes that can be synchronized automatically = 0
regular changes that cannot be synchronized automatically = 59



 
 number of one line micro-clone = 502 
 number of two line micro-clone =  103
 number of three line micro-clone = 22
 number of four line micro-clone = 14